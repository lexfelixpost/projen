// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creating java project with enum-typed CLI arg 1`] = `
"import io.github.cdklabs.projen.java.JavaProject;
import io.github.cdklabs.projen.java.JavaProjectOptions;
import io.github.cdklabs.projen.ProjectType;

public class projenrc {
    public static void main(String[] args) {
        JavaProject project = new JavaProject(JavaProjectOptions.builder()
            .artifactId(\\"my-app\\")
            .groupId(\\"org.acme\\")
            .name(\\"my-project\\")
            .version(\\"0.1.0\\")
            .projectType(ProjectType.LIB)
            .projenrcJava(true)
            .build());
        project.synth();
    }
}"
`;

exports[`creating node project with enum-typed CLI arg 1`] = `
"const { javascript } = require(\\"projen\\");
const project = new javascript.NodeProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  packageManager: javascript.NodePackageManager.NPM,

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();"
`;

exports[`creating python project with enum-typed CLI arg 1`] = `
"from projen.python import PythonProject
from projen import ProjectType

project = PythonProject(
    author_email=\\"my@user.email.com\\",
    author_name=\\"My User Name\\",
    module_name=\\"my_project\\",
    name=\\"my-project\\",
    version=\\"0.1.0\\",
    project_type=ProjectType.LIB,
    projenrc_python=True,
)

project.synth()"
`;

exports[`projen new awscdk-app-java 1`] = `
Object {
  "src/test/java/projenrc.java": "import io.github.cdklabs.projen.awscdk.AwsCdkJavaApp;
import io.github.cdklabs.projen.awscdk.AwsCdkJavaAppOptions;

public class projenrc {
    public static void main(String[] args) {
        AwsCdkJavaApp project = new AwsCdkJavaApp(AwsCdkJavaAppOptions.builder()
            .artifactId(\\"my-app\\")
            .cdkVersion(\\"2.1.0\\")
            .groupId(\\"org.acme\\")
            .mainClass(\\"org.acme.MyApp\\")
            .name(\\"my-project\\")
            .version(\\"0.1.0\\")
            .build());
        project.synth();
    }
}",
}
`;

exports[`projen new awscdk-app-py 1`] = `
Object {
  ".projenrc.py": "from projen.awscdk import AwsCdkPythonApp

project = AwsCdkPythonApp(
    author_email=\\"my@user.email.com\\",
    author_name=\\"My User Name\\",
    cdk_version=\\"2.1.0\\",
    module_name=\\"my_project\\",
    name=\\"my-project\\",
    version=\\"0.1.0\\",
)

project.synth()",
}
`;

exports[`projen new awscdk-app-ts 1`] = `
Object {
  ".projenrc.js": "const { awscdk } = require(\\"projen\\");
const project = new awscdk.AwsCdkTypeScriptApp({
  cdkVersion: \\"2.1.0\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new awscdk-construct 1`] = `
Object {
  ".projenrc.js": "const { awscdk } = require(\\"projen\\");
const project = new awscdk.AwsCdkConstructLibrary({
  author: \\"My User Name\\",
  authorAddress: \\"my@user.email.com\\",
  cdkVersion: \\"2.1.0\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  repositoryUrl: \\"git@boom.com:foo/bar.git\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new cdk8s-app-py 1`] = `
Object {
  ".projenrc.py": "from projen.cdk8s import Cdk8sPythonApp

project = Cdk8sPythonApp(
    author_email=\\"my@user.email.com\\",
    author_name=\\"My User Name\\",
    cdk8s_version=\\"2.3.33\\",
    module_name=\\"my_project\\",
    name=\\"my-project\\",
    version=\\"0.1.0\\",
)

project.synth()",
}
`;

exports[`projen new cdk8s-app-ts 1`] = `
Object {
  ".projenrc.js": "const { cdk8s } = require(\\"projen\\");
const project = new cdk8s.Cdk8sTypeScriptApp({
  cdk8sVersion: \\"2.3.33\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new cdk8s-construct 1`] = `
Object {
  ".projenrc.js": "const { cdk8s } = require(\\"projen\\");
const project = new cdk8s.ConstructLibraryCdk8s({
  author: \\"My User Name\\",
  authorAddress: \\"my@user.email.com\\",
  cdk8sVersion: \\"1.4.10\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  repositoryUrl: \\"git@boom.com:foo/bar.git\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new cdktf-construct 1`] = `
Object {
  ".projenrc.js": "const { cdktf } = require(\\"projen\\");
const project = new cdktf.ConstructLibraryCdktf({
  author: \\"My User Name\\",
  authorAddress: \\"my@user.email.com\\",
  cdktfVersion: \\"^0.8.3\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  repositoryUrl: \\"git@boom.com:foo/bar.git\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new java 1`] = `
Object {
  "src/test/java/projenrc.java": "import io.github.cdklabs.projen.java.JavaProject;
import io.github.cdklabs.projen.java.JavaProjectOptions;

public class projenrc {
    public static void main(String[] args) {
        JavaProject project = new JavaProject(JavaProjectOptions.builder()
            .artifactId(\\"my-app\\")
            .groupId(\\"org.acme\\")
            .name(\\"my-project\\")
            .version(\\"0.1.0\\")
            .build());
        project.synth();
    }
}",
}
`;

exports[`projen new jsii 1`] = `
Object {
  ".projenrc.js": "const { cdk } = require(\\"projen\\");
const project = new cdk.JsiiProject({
  author: \\"My User Name\\",
  authorAddress: \\"my@user.email.com\\",
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  repositoryUrl: \\"git@boom.com:foo/bar.git\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new nextjs 1`] = `
Object {
  ".projenrc.js": "const { web } = require(\\"projen\\");
const project = new web.NextJsProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
  // tailwind: true,          /* Setup Tailwind CSS as a PostCSS plugin. */
});
project.synth();",
}
`;

exports[`projen new nextjs-ts 1`] = `
Object {
  ".projenrc.js": "const { web } = require(\\"projen\\");
const project = new web.NextJsTypeScriptProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
  // tailwind: true,          /* Setup Tailwind CSS as a PostCSS plugin. */
});
project.synth();",
}
`;

exports[`projen new node 1`] = `
Object {
  ".projenrc.js": "const { javascript } = require(\\"projen\\");
const project = new javascript.NodeProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new project 1`] = `Object {}`;

exports[`projen new python 1`] = `
Object {
  ".projenrc.py": "from projen.python import PythonProject

project = PythonProject(
    author_email=\\"my@user.email.com\\",
    author_name=\\"My User Name\\",
    module_name=\\"my_project\\",
    name=\\"my-project\\",
    version=\\"0.1.0\\",
)

project.synth()",
}
`;

exports[`projen new react 1`] = `
Object {
  ".projenrc.js": "const { web } = require(\\"projen\\");
const project = new web.ReactProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new react-ts 1`] = `
Object {
  ".projenrc.js": "const { web } = require(\\"projen\\");
const project = new web.ReactTypeScriptProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new typescript 1`] = `
Object {
  ".projenrc.js": "const { typescript } = require(\\"projen\\");
const project = new typescript.TypeScriptProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projen new typescript-app 1`] = `
Object {
  ".projenrc.js": "const { typescript } = require(\\"projen\\");
const project = new typescript.TypeScriptAppProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();",
}
`;

exports[`projenrc-json creates java project 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes linguist-generated
/.github/workflows/pull-request-lint.yml linguist-generated
/.gitignore linguist-generated
/.projen/** linguist-generated
/.projen/deps.json linguist-generated
/.projen/files.json linguist-generated
/.projen/tasks.json linguist-generated
/pom.xml linguist-generated",
  ".github/workflows/pull-request-lint.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: pull-request-lint
on:
  pull_request_target:
    types:
      - labeled
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - edited
jobs:
  validate:
    name: Validate PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: amannn/action-semantic-pull-request@v4.5.0
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
        with:
          types: |-
            feat
            fix
            chore
          requireScope: false
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/.github/workflows/pull-request-lint.yml
!/pom.xml
.classpath
.project
.settings
target
dist/java
",
  ".projen/deps.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "dependencies": Array [
      Object {
        "metadata": Object {
          "configuration": Object {
            "source": "1.8",
            "target": "1.8",
          },
        },
        "name": "org.apache.maven.plugins/maven-compiler-plugin",
        "type": "build",
        "version": "3.8.1",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "rules": Array [
              Object {
                "requireMavenVersion": Array [
                  Object {
                    "version": "3.6",
                  },
                ],
              },
            ],
          },
          "executions": Array [
            Object {
              "goals": Array [
                "enforce",
              ],
              "id": "enforce-maven",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-enforcer-plugin",
        "type": "build",
        "version": "3.0.0-M3",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "archive": Object {
              "index": true,
              "manifest": Object {
                "addDefaultImplementationEntries": true,
                "addDefaultSpecificationEntries": true,
              },
            },
          },
        },
        "name": "org.apache.maven.plugins/maven-jar-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "configuration": Object {
            "additionalJOptions": Object {
              "additionalJOption": Array [
                "-J-XX:+TieredCompilation",
                "-J-XX:TieredStopAtLevel=1",
              ],
            },
            "detectJavaApiLink": false,
            "failOnError": false,
            "show": "protected",
          },
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-javadocs",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-javadoc-plugin",
        "type": "build",
        "version": "3.2.0",
      },
      Object {
        "metadata": Object {
          "executions": Array [
            Object {
              "goals": Array [
                "jar",
              ],
              "id": "attach-sources",
            },
          ],
        },
        "name": "org.apache.maven.plugins/maven-source-plugin",
        "type": "build",
        "version": "3.2.1",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-api",
        "type": "test",
        "version": "5.7.0",
      },
      Object {
        "name": "org.junit.jupiter/junit-jupiter-engine",
        "type": "test",
        "version": "5.7.0",
      },
    ],
  },
  ".projen/files.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "files": Array [
      ".gitattributes",
      ".github/workflows/pull-request-lint.yml",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      "pom.xml",
    ],
  },
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "build": Object {
        "description": "Full release build",
        "name": "build",
        "steps": Array [
          Object {
            "spawn": "default",
          },
          Object {
            "spawn": "pre-compile",
          },
          Object {
            "spawn": "compile",
          },
          Object {
            "spawn": "post-compile",
          },
          Object {
            "spawn": "test",
          },
          Object {
            "spawn": "package",
          },
        ],
      },
      "clobber": Object {
        "condition": "git diff --exit-code > /dev/null",
        "description": "hard resets to HEAD of origin and cleans the local repo",
        "env": Object {
          "BRANCH": "$(git branch --show-current)",
        },
        "name": "clobber",
        "steps": Array [
          Object {
            "exec": "git checkout -b scratch",
            "name": "save current HEAD in \\"scratch\\" branch",
          },
          Object {
            "exec": "git checkout $BRANCH",
          },
          Object {
            "exec": "git fetch origin",
            "name": "fetch latest changes from origin",
          },
          Object {
            "exec": "git reset --hard origin/$BRANCH",
            "name": "hard reset to origin commit",
          },
          Object {
            "exec": "git clean -fdx",
            "name": "clean all untracked files",
          },
          Object {
            "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
          },
        ],
      },
      "compile": Object {
        "description": "Only compile",
        "name": "compile",
        "steps": Array [
          Object {
            "exec": "mvn compiler:compile",
          },
        ],
      },
      "default": Object {
        "description": "Synthesize project files",
        "env": Object {
          "FILENAME": ".projenrc.json",
        },
        "name": "default",
        "steps": Array [
          Object {
            "builtin": "run-projenrc-json",
          },
        ],
      },
      "eject": Object {
        "description": "Remove projen from the project",
        "env": Object {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": Array [
          Object {
            "spawn": "default",
          },
        ],
      },
      "package": Object {
        "description": "Creates the distribution package",
        "env": Object {
          "MAVEN_OPTS": "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
        },
        "name": "package",
        "steps": Array [
          Object {
            "exec": "mkdir -p dist/java",
          },
          Object {
            "exec": "mvn deploy -D=altDeploymentRepository=local::default::file:///$PWD/dist/java",
          },
        ],
      },
      "post-compile": Object {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": Object {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "test": Object {
        "description": "Run tests",
        "name": "test",
        "steps": Array [
          Object {
            "exec": "mvn test",
          },
        ],
      },
    },
  },
  ".projenrc.json": Object {
    "artifactId": "my-app",
    "groupId": "org.acme",
    "name": "my-project",
    "projenrcJson": true,
    "type": "projen.java.JavaProject",
    "version": "0.1.0",
  },
  "README.md": "# replace this",
  "pom.xml": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>
<project xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\" xmlns=\\"http://maven.apache.org/POM/4.0.0\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.acme</groupId>
    <artifactId>my-app</artifactId>
    <version>0.1.0</version>
    <packaging>jar</packaging>
    <name>my-project</name>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <version>3.6</version>
                        </requireMavenVersion>
                    </rules>
                </configuration>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <show>protected</show>
                    <detectJavaApiLink>false</detectJavaApiLink>
                    <additionalJOptions>
                        <additionalJOption>-J-XX:+TieredCompilation</additionalJOption>
                        <additionalJOption>-J-XX:TieredStopAtLevel=1</additionalJOption>
                    </additionalJOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
<!-- ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\". -->",
  "src/main/java/org/acme/Main.java": "package org.acme;

public class Main {
  public static void main(final String[] args) {
    System.out.println(\\"Hello, world!\\");
  }
}",
  "src/test/java/org/acme/MyTest.java": "package org.acme;

import org.junit.jupiter.api.Test;

public class MyTest {
  @Test
  public void testHello() {
    System.out.println(\\"Hello, world!\\");
  }
}",
}
`;

exports[`projenrc-json creates node-project 1`] = `
Object {
  "defaultReleaseBranch": "main",
  "name": "my-project",
  "projenrcJson": true,
  "type": "projen.javascript.NodeProject",
}
`;

exports[`projenrc-ts creates typescript projenrc 1`] = `
"import { typescript } from \\"projen\\";
const project = new typescript.TypeScriptProject({
  defaultReleaseBranch: \\"main\\",
  name: \\"my-project\\",
  projenrcTs: true,

  // deps: [],                /* Runtime dependencies of this module. */
  // description: undefined,  /* The description is just a string that helps people understand the purpose of the package. */
  // devDeps: [],             /* Build dependencies for this module. */
  // packageName: undefined,  /* The \\"name\\" in package.json. */
});
project.synth();"
`;
